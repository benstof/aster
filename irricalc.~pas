unit irricalc;
interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  ExtCtrls, StdCtrls, Buttons,
  form2unt,
  clipbrd,
  printers,
  inifiles,
  registry,
  ShellApi,
  //SDL_sdlbase,
  ComCtrls, Tabnotbk, Menus, cxLookAndFeelPainters, cxButtons, Grids,
  BaseGrid, AdvGrid, AdvSprd, dxsbar, ImgList, cxGraphics, cxLookAndFeels;


type
  Tcalcbox = class(TForm)
    Page1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    box1: TGroupBox;
    Bevel4: TBevel;
    Bevel2: TBevel;
    flow1: TLabel;
    diam1: TLabel;
    spoed1: TLabel;
    Bevel3: TBevel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    flowunt: TLabel;
    diamunt: TLabel;
    speedunt: TLabel;
    flow2: TLabel;
    diam2: TLabel;
    speed2: TLabel;
    rspoed: TRadioButton;
    rdiam: TRadioButton;
    rflow: TRadioButton;
    iflow: TEdit;
    idiam: TEdit;
    ispoed: TEdit;
    GroupBox1: TGroupBox;
    presbox: TGroupBox;
    Label6: TLabel;
    lossunit: TLabel;
    maxloss: TEdit;
    pres1: TRadioButton;
    pres2: TRadioButton;
    Panel1: TPanel;
    Label5: TLabel;
    Label4: TLabel;
    startpress: TEdit;
    endpress: TEdit;
    Panel2: TPanel;
    GroupBox2: TGroupBox;
    Label7: TLabel;
    slope: TEdit;
    GroupBox3: TGroupBox;
    Label9: TLabel;
    flowunit: TLabel;
    regspasunit: TLabel;
    Label19: TLabel;
    emitflow: TEdit;
    regular: TRadioButton;
    onlyend: TRadioButton;
    regspas: TEdit;
    GroupBox4: TGroupBox;
    book1: TTabbedNotebook;
    Bevel6: TBevel;
    Label11: TLabel;
    diamunit: TLabel;
    Label13: TLabel;
    lenresult: TLabel;
    diaminput: TEdit;
    Bevel5: TBevel;
    Label8: TLabel;
    Label10: TLabel;
    diamresult: TLabel;
    pipeunit: TLabel;
    leninput: TEdit;
    Label14: TLabel;
    pipeunit2: TLabel;
    Label16: TLabel;
    diamunit2: TLabel;
    Bevel7: TBevel;
    Label18: TLabel;
    totalloss: TLabel;
    Label15: TLabel;
    Label17: TLabel;
    totlossunit: TLabel;
    egain: TLabel;
    floss: TLabel;
    leninput2: TEdit;
    diaminput2: TEdit;
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    GroupBox5: TGroupBox;
    Label12: TLabel;
    pfric2: TComboBox;
    clp: TBitBtn;
    HelpBtn: TBitBtn;
    TabSheet3: TTabSheet;
    GroupBox21: TGroupBox;
    lenunit: TRadioGroup;
    presunit: TRadioGroup;
    flounit: TRadioGroup;
    dimunit: TRadioGroup;
    Label21: TLabel;
    Label20: TLabel;
    cv: TEdit;
    MaxP: TEdit;
    Label24: TLabel;
    Bevel1: TBevel;
    pipeinputD: TEdit;
    drippipeU: TLabel;
    regspasD1: TEdit;
    regspasD2: TEdit;
    regspasD3: TEdit;
    regspasD4: TEdit;
    regspasD5: TEdit;
    regspasD6: TEdit;
    regspasD7: TEdit;
    nomflow: TLabel;
    dripflowU: TLabel;
    Label22: TLabel;
    Label26: TLabel;
    expo: TEdit;
    flowK: TEdit;
    Label23: TLabel;
    Label27: TLabel;
    Bevel8: TBevel;
    Label25: TLabel;
    cxB: TcxButton;
    calc: TcxButton;
    regspasD10: TEdit;
    regspasD9: TEdit;
    regspasD8: TEdit;
    Label28: TLabel;
    corFac: TEdit;
    Label29: TLabel;
    kdfac: TEdit;
    Label31: TLabel;
    pfric: TComboBox;
    PageC1: TPageControl;
    TabSheet4: TTabSheet;
    Memo1: TMemo;
    TabSheet5: TTabSheet;
    Memo2: TMemo;
    Memo3: TMemo;
    Label30: TLabel;
    Label32: TLabel;
    spr1: TAdvSpreadGrid;
    GroupBox6: TGroupBox;
    BitBtn3: TBitBtn;
    psetup: TBitBtn;
    PrinterSetupDialog1: TPrinterSetupDialog;
    GroupBox7: TGroupBox;
    xbut: TBitBtn;
    Label33: TLabel;
    Label34: TLabel;
    SideBar1: TdxSideBar;
    ImageList1: TImageList;
    Label35: TLabel;
    mflow: TLabel;
    Label37: TLabel;
    Mflowh: TLabel;
    ImAlso: TCheckBox;
    BitBtn4: TBitBtn;
    TabSheet6: TTabSheet;
    Memo4: TMemo;
    Label36: TLabel;
    comma: TCheckBox;
    Image1: TImage;
    regspasD15: TEdit;
    regspasD14: TEdit;
    regspasD13: TEdit;
    regspasD12: TEdit;
    regspasD11: TEdit;
    format1: TRadioGroup;
    ppl: TCheckBox;
    minp: TEdit;
    procedure FormActivate(Sender: TObject);
    procedure rflowClick(Sender: TObject);
    procedure FormDeactivate(Sender: TObject);
    procedure iflowChange(Sender: TObject);
    procedure pres1Click(Sender: TObject);
    procedure leninputChange(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure pres3Click(Sender: TObject);
    procedure book1Change(Sender: TObject; NewTab: Integer;
      var AllowChange: Boolean);
    procedure clpClick(Sender: TObject);
    procedure BitBtn2Click(Sender: TObject);
    procedure HlpClick(Sender: TObject);
    procedure HelpBtnClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Page1Change(Sender: TObject);
    procedure BitBtn3Click(Sender: TObject);
    procedure cxBClick(Sender: TObject);
    procedure xbutClick(Sender: TObject);
    procedure psetupClick(Sender: TObject);
    procedure SideBar1ItemClick(Sender: TObject; Item: TdxSideBarItem);
    procedure BitBtn4Click(Sender: TObject);
    procedure Edit1Change(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    commas : boolean;
    formatI : integer;
    minlos : double;
    procedure docalc;
    procedure ChangeUnits;
    procedure PlotLoss(no : integer; emitspas,p2,p3:double);
  end;

  unitsobj=object
        nom,lenunit1,pressunit1,flowunit1,diamunit1 : integer;
        {nom<0 meen gebruik default unit item}
        function len_si(ll:real):real;    {mm werk in meters}
        function press_SI(ll:real):real;   {MM werk in meter water hoogte}
        function flow_SI(ll:real):real;     {MM werk in l/s}
        function diam_SI(ll:real):real;
        function sdr_SI(ll:real):real;    {flow/sec/len = l/s/m}
        function precip_si(ll:real):real;   {mm werk in mm/h}

        function SI_len(ll:real):real;    {mm werk in meters}
        function SI_press(ll:real):real;   {MM werk in meter water hoogte}
        function SI_flow(ll:real):real;     {MM werk in l/s}
        function SI_diam(ll:real):real;
        function SI_sdr(ll:real):real;    {l/s/m = flow/sec/len}
        function si_precip(ll:real):real;

        function press:string;
        function flow:string;
        function leng:string;
        function diam:string;
        function velo:string;
        function precip:string;


    end;


    type emitrec = record
       flow,press : double;
     end;


var
  calcbox: Tcalcbox;
  emit : array[1..4000] of emitrec;


procedure doirricalc(metric:boolean);

implementation

uses Plotunit;

//uses PipeSamples, Mainform;

//uses irriunt;

var units : unitsobj;

{$R *.DFM}


function Ccolor(j:integer):tcolor;
begin
   case j of
   1 : result:=clAqua;
   //1 : result:=clBlack
   2 : result:=clolive;   //blue;
   3 : result:=clCream;
   4 : result:=clyellow;  //clDkGray;
   5 : result:=clFuchsia;
   6 : result:=clGray;
   7 : result:=clGreen;
   8 : result:=clLime;
   9 : result:=clLtGray;
   10 : result:=clMaroon;
   11 : result:=clMedGray;
  // 12 : result:=clMoneyGreen
   12 : result:=clteal;
   13 : result:=clSkyBlue;  //clOlive;
   14 : result:=clPurple;
   15 : result:=clRed;
 //  1 : result:=clSilver
 //  1 : result:=
 //  1 : result:=clTeal
 //  1 : result:=clWhite
  // 1 : result:=clYellow
  end;
end;


function speed(pflow,diam:double):double;    {input as l/s and mm  result=m/s}
begin
   result:=0;                       {feet/sec}               {meters}
   if diam>0 then result:=(0.408*pflow*15.852/sqr(diam/25.4))*0.305;
end;



function GetExeByExtension(sExt : string) : string;
var
   sExtDesc:string;
begin
   with TRegistry.Create do
   begin
     try
       RootKey:=HKEY_CLASSES_ROOT;
       if OpenKeyReadOnly(sExt) then
       begin
         sExtDesc:=ReadString('') ;
         CloseKey;
       end;
       if sExtDesc <>'' then
       begin
         if OpenKeyReadOnly(sExtDesc + '\Shell\Open\Command') then
         begin
           Result:= ReadString('') ;
         end
       end;
     finally
       Free;
     end;
   end;

   if Result <> '' then
   begin
     if Result[1] = '"' then
     begin
       Result:=Copy(Result,2,-1 + Pos('"',Copy(Result,2,MaxINt))) ;
     end
   end;
end;



{-------user unit to SI unit-----}
function unitsobj.press:string;
begin
   nom:=pressunit1;
   case nom of
   0 : result:='m';
   1 : result:='ft';
   2 : result:='Bars';
   3 : result:='psi';
   end;
end;
function unitsobj.flow:string;
begin
   nom:=flowunit1;
   case nom of
   0 : result:='l/s';
   1 : result:='m3/h';
   2 : result:='gpm';
   3 : result:='l/h';
   4 : result:='gph';
   end;
end;
function unitsobj.leng:string;
begin
   nom:=lenunit1;
   case nom of
   0 : result:='m';
   1 : result:='ft';
   end;
end;
function unitsobj.velo:string;
begin
   result:=leng+'/sec';
end;

function unitsobj.diam:string;
begin
   nom:=diamunit1;
   case nom of
   0 : result:='mm';
   1 : result:='inch';
   end;
end;

function unitsobj.precip:string;
begin
   nom:=flowunit1;
   case nom of
   0,1,3 : result:='mm/h';
   2 : result:='inch/h';
   end;
end;

function unitsobj.len_si(ll:real):real;    {mm werk in meters}
begin
   nom:=lenunit1;
   case nom of
   0 : result:=ll;           {meters=meters}
   1 : result:=ll*0.305;     {1 ft =.305 m}
   end;
end;

function unitsobj.press_SI(ll:real):real;   {MM werk in meter water hoogte}
begin
   nom:=pressunit1;
   case nom of
   0 : result:=ll;                    {meter = meter}
   1 : result:=ll*0.305;              {vt of water .305=meter}
   2 : result:=ll*10;  //*14.5*2.307*0.305;   {bars to psi to vt to meters}
   3 : result:=ll*2.307*0.305;        {Psi (2.307) ft of water (.305) to meters}
   end;
end;
function unitsobj.flow_SI(ll:real):real;     {MM werk in l/s}
begin
   nom:=flowunit1;
   case nom of
   0 : result:=ll;                  {l/s=l/s}
   1 : result:=ll/0.227/15.852;     {m3/h 264.2 =gpm 0.063 =l/s}
   2 : result:=ll*0.063;            {GPM 0.063 =l/s}
   3 : result:=ll/3600;
   end;
end;
function unitsobj.diam_SI(ll:real):real;
begin
   nom:=diamunit1;
   case nom of
   0 : result:=ll;                  {mm=mm}
   1 : result:=ll*25.4;             {inch 25.4 = mm}
   end;
end;
function unitsobj.sdr_SI(ll:real):real;    {l/s/m = flow/sec/len}
begin
   result:=ll/len_SI(1)*flow_SI(1);
end;

function unitsobj.precip_SI(ll:real):real;
begin
   nom:=flowunit1;
   case nom of
   0,1,3 : result:=ll;                  {mm=mm}
   2     : result:=ll*25.4;             {inch 25.4 = mm}
   end;
end;


function unitsobj.SI_len(ll:real):real;    {mm werk in meters}
begin
   nom:=lenunit1;
   case nom of
   0 : result:=ll;           {meters=meters}
   1 : result:=ll/0.305;     {1 ft =.305 m}
   end;
end;
function unitsobj.SI_press(ll:real):real;   {MM werk in meter water hoogte}
begin
   nom:=pressunit1;
   case nom of
   0 : result:=ll;                    {meter = meter}
   1 : result:=ll/0.305;              {vt of water .305=meter}
   2 : result:=ll/10; // /14.5/2.307/0.305;   {bars to psi to vt to meters}
   3 : result:=ll/2.307/0.305;        {Psi (2.307) ft of water (.305) to meters}
   end;
end;
function unitsobj.SI_flow(ll:real):real;     {MM werk in l/s}
begin
   nom:=flowunit1;
   case nom of
   0 : result:=ll;                  {l/s=l/s}
   1 : result:=ll*15.852*0.227;      {m3/h 264.2 =gpm 0.063 =l/s}
   2 : result:=ll/0.063;            {GPM 0.063 =l/s}
   3 : result:=ll*3600;
   4 : result:=ll/0.063*60;         {gph}
   end;
end;
function unitsobj.SI_diam(ll:real):real;
begin
   nom:=diamunit1;
   case nom of
   0 : result:=ll;                  {mm=mm}
   1 : result:=ll/25.4;             {inch 25.4 = mm}
   end;
end;
function unitsobj.SI_sdr(ll:real):real;    {l/s/m = flow/sec/len}
begin
   result:=ll/si_len(1)*si_flow(1);
end;
function unitsobj.SI_precip(ll:real):real;
begin
   nom:=flowunit1;
   case nom of
   0,1,3 : result:=ll;                  {mm=mm}
   2     : result:=ll/25.4;             {inch 25.4 = mm}
   end;
end;
{===================}


//============

function mag(a1,a2:real):real;        {X^Y     a1^a2}
begin
   result:=0;

   if a1<>0 then result:=exp(a2*ln(a1));
end;

function hazen(L,q,d,C,dw:real):real;    {Hazen Williams   met variables}
var v,tp,diamm,re,f:real;
begin
   result:=0;
   if c=0 then c:=150;  {plastic}
          {hazen will}
                   {friction in pipe + z2-z1 diff}
   if q/c>0.000000000001 then
      result:={1050}1.212e12*mag(Q/C,1.852)*mag(D,-4.87);
   result:=result*L/100;
end;



procedure Tcalcbox.docalc;
var flow_,diam_,spoed_,area,rad : real;
    f,ww : integer;
begin



   ww:=1;
   if rdiam.checked then ww:=2;
   if rspoed.checked then ww:=3;

   val(iflow.text,flow_,f);
   flow_:=units.flow_si(flow_)/1000;
   val(idiam.text,diam_,f);
   diam_:=units.diam_si(diam_);
   area:=sqr(diam_/2)*pi/(1000*1000);

   val(ispoed.text,spoed_,f);
   spoed_:=units.len_si(spoed_);
   flow1.caption:=iflow.text;
   diam1.caption:=idiam.text;
   spoed1.caption:=ispoed.text;
   case ww of
      1 : begin
             flow1.caption:=rtostr(units.si_flow(spoed_*area*1000),10,2); //m3/s>l/s
          end;
      2 : begin
             if spoed_>0 then
             begin
                area:=flow_/spoed_; rad:=sqrt(area/pi)*1000*2;   //m>mm
                diam1.caption:=rtostr(units.si_diam(rad),10,2);
             end;
          end;
      3 : begin
             if area>0 then
             begin
                rad:=flow_/area;       //m3/s /m2  =m/s
                spoed1.caption:=rtostr(units.si_len(rad),10,2);
             end;
          end;

   end;
end;


procedure doirricalc(metric:boolean);
begin
   Application.CreateForm(Tcalcbox,calcbox);
   with calcbox do
   begin
      //caption:=pnaam;
      with units do
      begin
         lenunit1:=1;
         pressunit1:=3;
         flowunit1:=2;
         diamunit1:=1;
         if metric then
         begin
            lenunit1:=0;
            pressunit1:=0;
            flowunit1:=0;
            diamunit1:=0;
         end;
      end;

      showmodal;
      release;
     // pipeForm.visible:=false;
   end;
end;

procedure Tcalcbox.FormActivate(Sender: TObject);
var j : integer;
begin

  // top:=Get_Top;
  // left:=Get_left;

   with waarde do
   begin

      //lenunit.itemindex:=readint('Irrig','Len unit',0);
      //dimunit.itemindex:=readint('Irrig','Diam unit',0);
      //flounit.itemindex:=readint('Irrig','Flow unit',0);
      //presunit.itemindex:=readint('Irrig','Press unit',0);

      ChangeUnits;

      formatI:=readint('Irricalc','FormatI',0);

      format1.ItemIndex:=readint('Irricalc','Format1',0);

      panel2.left:=8;
      panel2.top:=20;
      panel2.visible:=false;
      book1.pageindex:=0;

      pfric.text:=readstring('Irricalc','Pfric','145');
      iflow.text:=readstring('Irricalc','Iflow','0');
      idiam.text:=readstring('Irricalc','Idiam','0');
      ispoed.text:=readstring('Irricalc','Ispeed','0');
      case readint('Irricalc','Calc1',1) of
      1 : rflow.checked:=true;
      2 : rdiam.checked:=true;
      3 : rspoed.checked:=true;
      end;

      ImAlso.checked:=readbool('Irrig','ImAlso',false);
      comma.checked:=readbool('Irrig','Comma',false);

      startpress.text:=readstring('Irricalc','Startpress','50');
      endpress.text:=readstring('Irricalc','Endpress','40');
      maxloss.text:=readstring('Irricalc','Maxloss','20');

      label19.visible:=false;

      emitflow.text:=readstring('Irricalc','Emitflow','2');


      cv.Text  :=waarde.readstring('Irricalc','CV','2.5');
      expo.Text:=waarde.readstring('Irricalc','Expo','0.53');


      //leninputChange(Sender);

      regspas.text:=readstring('Irricalc','Regspas','2');
      slope.text:=readstring('Irricalc','Slope','0');
      leninput.text:=readstring('Irricalc','Leninput','25');
      diaminput.text:=readstring('Irricalc','Pipeinput','13.8');
      leninput2.text:=leninput.text;
      diaminput2.text:=diaminput.text;


      case readint('Irricalc','Pressures',1) of
      1 : pres1.checked:=true;
      2 : pres2.checked:=true;
      end;

      if readint('Irricalc','Emitplace',1)=1 then
         regular.checked:=true
      else
         onlyend.checked:=true;

      regspasd1.Text:=readstring('Irricalc','Regspas1','15');
      regspasd2.Text:=readstring('Irricalc','Regspas2','25');
      regspasd3.Text:=readstring('Irricalc','Regspas3','30');
      regspasd4.Text:=readstring('Irricalc','Regspas4','40');
      regspasd5.Text:=readstring('Irricalc','Regspas5','50');
      regspasd6.Text:=readstring('Irricalc','Regspas6','60');
      regspasd7.Text:=readstring('Irricalc','Regspas7','70');
      regspasd8.Text:=readstring('Irricalc','Regspas8','75');
      regspasd9.Text:=readstring('Irricalc','Regspas9','90');
      regspasd10.Text:=readstring('Irricalc','Regspas10','100');
      regspasd11.Text:=readstring('Irricalc','Regspas11','110');
      regspasd12.Text:=readstring('Irricalc','Regspas12','120');
      regspasd13.Text:=readstring('Irricalc','Regspas13','130');
      regspasd14.Text:=readstring('Irricalc','Regspas14','140');
      regspasd15.Text:=readstring('Irricalc','Regspas15','150');

      memo2.clear;  memo3.Clear;
      for j:=1 to 5 do
         memo2.lines.add(readstring('Irricalc','Head'+inttostr(j),''));
      for j:=1 to 5 do
         memo3.lines.add(readstring('Irricalc','Foot'+inttostr(j),''));



      flowK.Text:=waarde.readstring('Irricalc','K','1.5');
      MaxP.Text:=waarde.readstring('Irricalc','Maxp','4');
      MinP.Text:=waarde.readstring('Irricalc','Minp','0.7');

      Corfac.Text:=waarde.readstring('Irricalc','CorrectionFactor','0');
      Kdfac.Text:=waarde.readstring('Irricalc','KDFactor','0.40');

   end;
   flowunt.caption:=units.flow;
   flowunit.caption:=units.flow;
   diamunt.caption:=units.diam;
   speedunt.caption:=units.velo;
   flow2.caption:=flowunt.caption;
   diam2.caption:=diamunt.caption;
   diamunit.caption:=diamunt.caption;
   diamunit2.caption:=diamunt.caption;
   speed2.caption:=speedunt.caption;
   pipeunit.caption:=units.leng;
   pipeunit2.caption:=units.leng;
   regspasunit.caption:=units.leng;

   lossunit.caption:=units.press;
   totlossunit.caption:=units.press;
   presbox.caption:='Pressures ('+units.press+')';

   //emitflowd.Text:=emitflow.text;

   pipeinputd.Text:=diaminput2.text;

   dripflowU.Caption:=units.flow;
//   driplenu.caption:=units.leng;
   drippipeU.Caption:=units.diam;


   rflowclick(sender);
end;

procedure Tcalcbox.rflowClick(Sender: TObject);
var j : integer;
begin
   j:=1;
   if rdiam.checked then j:=2;
   if rspoed.checked then j:=3;

   iflow.visible:=j<>1;
   idiam.visible:=j<>2;
   ispoed.visible:=j<>3;
   //flow1.visible:=j=1;
   //diam1.visible:=j=2;
   //spoed1.visible:=j=3;
   docalc;
end;

procedure Tcalcbox.FormDeactivate(Sender: TObject);
var j : integer;
begin
 //pipeForm.visible:=false;
   with waarde do
   begin

      writeint('Irricalc','Format1',format1.ItemIndex);

      writeint('Irricalc','FormatI', formatI);

      writeint('Irrig','Len unit',lenunit.itemindex);
      writeint('Irrig','Diam unit',dimunit.itemindex);
      writeint('Irrig','Flow unit',flounit.itemindex);
      writeint('Irrig','Press unit',presunit.itemindex);

      writebool('Irrig','ImAlso',ImAlso.checked);
      writebool('Irrig','Comma',comma.checked);


      writestring('Irricalc','Pfric',pfric.text);
      writestring('Irricalc','Iflow',iflow.text);
      writestring('Irricalc','Idiam',idiam.text);
      writestring('Irricalc','Ispeed',ispoed.text);
      if rflow.checked then writeint('Irricalc','Calc1',1);
      if rdiam.checked then writeint('Irricalc','Calc1',2);
      if rspoed.checked then writeint('Irricalc','Calc1',3);

      writestring('Irricalc','Startpress',startpress.text);
      writestring('Irricalc','Endpress',endpress.text);
      writestring('Irricalc','Maxloss',maxloss.text);
      writestring('Irricalc','Emitflow',emitflow.text);
      writestring('Irricalc','Regspas',regspas.text);
      writestring('Irricalc','Slope',slope.text);
      writestring('Irricalc','Leninput',leninput.text);
      writestring('Irricalc','Pipeinput',pipeinputd.text);

      writestring('Irricalc','CV',cv.Text);
      writestring('Irricalc','Expo',expo.Text);

      writestring('Irricalc','K',flowK.Text);
      writestring('Irricalc','Maxp',MaxP.Text);
      writestring('Irricalc','Minp',MinP.Text);
      waarde.writestring('Irricalc','CorrectionFactor',Corfac.Text);
      waarde.writestring('Irricalc','KDFactor',Kdfac.Text);

      writestring('Irricalc','Regspas1',regspasd1.Text);
      writestring('Irricalc','Regspas2',regspasd2.Text);
      writestring('Irricalc','Regspas3',regspasd3.Text);
      writestring('Irricalc','Regspas4',regspasd4.Text);
      writestring('Irricalc','Regspas5',regspasd5.Text);
      writestring('Irricalc','Regspas6',regspasd6.Text);
      writestring('Irricalc','Regspas7',regspasd7.Text);
      writestring('Irricalc','Regspas8',regspasd8.Text);
      writestring('Irricalc','Regspas9',regspasd9.Text);
      writestring('Irricalc','Regspas10',regspasd10.Text);
      writestring('Irricalc','Regspas11',regspasd11.Text);
      writestring('Irricalc','Regspas12',regspasd12.Text);
      writestring('Irricalc','Regspas13',regspasd13.Text);
      writestring('Irricalc','Regspas14',regspasd14.Text);
      writestring('Irricalc','Regspas15',regspasd15.Text);

      for j:=0 to memo2.Lines.Count do
         writestring('Irricalc','Head'+inttostr(j+1),memo2.lines[j]);

      for j:=0 to memo3.Lines.Count do
         writestring('Irricalc','Foot'+inttostr(j+1),memo3.lines[j]);

      
      j:=3;
      if pres1.checked then j:=1 else
      if pres2.checked then j:=2;

      writeint('Irricalc','Pressures',j);

      if regular.checked then j:=1 else j:=2;
      writeint('Irricalc','Emitplace',j);
   end;
end;

procedure Tcalcbox.iflowChange(Sender: TObject);
begin
   docalc;
end;

procedure Tcalcbox.pres1Click(Sender: TObject);
begin
   panel1.visible:=pres1.checked;
   leninputChange(Sender);
end;

procedure Tcalcbox.leninputChange(Sender: TObject);
begin
   diamresult.caption:='?';
   lenresult.caption:='?';
   egain.caption:='?';
   floss.caption:='?';
   totalloss.caption:='?';


 {  if mining1 and (main.metric1.checked) then
   begin
      label19.caption:=rtostr( strtor(emitflow.text)*3600,10,1)+'l/h';
      label19.visible:=true;
   end;}
end;

procedure Tcalcbox.BitBtn1Click(Sender: TObject);
var maxlos,p1,p2,maxlim : real;
    slopee,lank,losses,flow : real;
    emitval,emitspas,diam,pf : real;
    f : integer;
    dar,stop : boolean;
begin
   dar:=false; //irribox._darcy;
   //irribox._darcy:=false;

   val(startpress.text,p1,f);  p1:=units.press_si(p1);
   val(endpress.text,p2,f);    p2:=units.press_si(p2);
   pf:=strtor(pfric.text);

   maxlos:=p1-p2;
   if pres2.checked then
   begin
      val(maxloss.text,p1,f);
      maxlos:=units.press_si(p1);
   end;
   val(slope.text,slopee,f);
   val(emitflow.text,emitval,f);  emitval:=units.flow_si(emitval);
   emitspas:=0;
   if regular.checked then
   begin
      val(regspas.text,emitspas,f);
      emitspas:=units.len_si(emitspas);
   end;
   val(diaminput.text,diam,f);  diam:=units.diam_si(diam);
   val(leninput.text,lank,f);   lank:=units.len_si(lank);

   case book1.pageindex of
   0 : begin          //max pipe len
                 lank:=0.5;

          if emitspas>0 then lank:=emitspas;

          stop:=false;
          flow:=emitval;
          losses:=0;
          repeat
             if emitspas>0 then
             begin
                p1:=hazen(emitspas,flow,diam,pf,0.01);
                losses:=losses+p1;
             end
             else
                losses:=hazen(lank,flow,diam,pf,0.01);
             if losses-lank*slopee/100>maxlos then
             begin
                stop:=true;
                if emitspas>0 then
                   lank:=lank-emitspas
                else
                   lank:=lank-0.25;
             end
             else
             begin
                if emitspas>0 then
                   lank:=lank+emitspas
                else
                   lank:=lank+0.25;
             end;
             if emitspas>0 then
                flow:=(trunc(lank/emitspas))*emitval;

          until stop or (lank>200000);
          lenresult.caption:=rtostr(units.si_len(lank),10,2)+' '+units.leng;
       end;
   1 : begin          //pipe diam
            diam:=1;
          losses:=0;
          stop:=false;
          repeat
             flow:=emitval;
             if emitspas>0 then
             begin
                p2:=emitspas;
                losses:=0;
                while p2<lank do
                begin
                   flow:=(trunc(p2/emitspas)+1)*emitval;
                   p1:=hazen(emitspas,flow,diam,pf,0.01);
                   losses:=losses+p1;
                   p2:=p2+emitspas;
                end;
             end
             else
                losses:=hazen(lank,flow,diam,pf,0.01);
             if losses-lank*slopee/100>maxlos then
                 diam:=diam+0.1
             else
             begin
                stop:=true;
                //if diam>1 then diam:=diam-0.1;
             end;
          until stop or (diam>2000);
          diamresult.caption:=rtostr(units.si_diam(diam),10,2)+' '+units.diam;
       end;
   2 : begin          //pipe fric
          diam:=10;
          losses:=0;
          val(diaminput2.text,diam,f);  diam:=units.diam_si(diam);
          val(leninput2.text,lank,f);   lank:=units.len_si(lank);
             flow:=emitval;
             if emitspas>0 then
             begin
                p2:=emitspas;
                losses:=0;
                while p2<lank do
                begin
                   flow:=(trunc(p2/emitspas)+1)*emitval;
                   p1:=hazen(emitspas,flow,diam,pf,0.01);
                   losses:=losses+p1;
                   p2:=p2+emitspas;
                end;
             end
             else
                losses:=hazen(lank,flow,diam,pf,0.01);
             slopee:=lank*slopee/100;
          if slopee>0 then
             label18.caption:='Elevation gain'
             else
             label18.caption:='Elevation loss';
          egain.caption:='= '+rtostr(units.si_press(slopee),10,2);
          floss.caption:='= '+rtostr(units.si_press(-losses),10,2);

          if -losses+slopee>0 then
             label17.caption:='Total gain'
             else
             label17.caption:='Total loss';
          totalloss.caption:='= '+rtostr(units.si_press(-losses+slopee),10,2);
       end;
   end;
   rspoed.checked:=true;
   iflow.text:=rtostr(units.si_flow(flow),10,2);
   idiam.text:=rtostr(units.si_diam(diam),10,2);
   //irribox._darcy:=dar;
end;

procedure Tcalcbox.pres3Click(Sender: TObject);
begin
   book1.pageindex:=2;
end;

procedure Tcalcbox.book1Change(Sender: TObject; NewTab: Integer;
  var AllowChange: Boolean);
begin
   panel2.visible:=newtab=2;
end;

procedure Tcalcbox.clpClick(Sender: TObject);
var x1,y1,x2,y2,t : integer;
    bm : tbitmap;
    tr,tr1 : trect;
begin
   clp.visible:=false;
   //hlp.visible:=false;
   //clo.visible:=false;

   bm:=tbitmap.create;
   with calcbox do
   begin
      bm.height:=height;
      bm.width:=width;
      tr1.left:=-3;
      tr1.right:=width-4;
      tr1.top:=-21;
      tr1.bottom:=height-23;
      tr.left:=0;
      tr.right:=bm.width;
      tr.top:=0;
      tr.bottom:=bm.height;
   end;
   bm.canvas.copyrect(tr,calcbox.canvas,tr1);  //tr1);
   clipboard.assign(bm);
   bm.free;
   clp.visible:=true;
   //hlp.visible:=true;
   //clo.visible:=true;


end;

procedure Tcalcbox.BitBtn2Click(Sender: TObject);
begin
{   with PipeForm do
   begin
      left:=calcbox.left+calcbox.width;
      top:=calcbox.top;
      show;
   end;}   
end;

procedure Tcalcbox.HlpClick(Sender: TObject);
begin
   Application.HelpCommand(HELP_CONTEXT, (sender as tbitbtn).helpcontext);
end;

procedure Tcalcbox.HelpBtnClick(Sender: TObject);
begin
   Application.HelpCommand(HELP_CONTEXT, (sender as tbitbtn).helpcontext);
end;

procedure Tcalcbox.FormCreate(Sender: TObject);
var s : string;
begin
   getdir(0,s);
   waarde.ini:=tinifile.create(s+'\MM_Calc.INI');
   pagec1.ActivePageIndex:=0;

   if fileexists('logo.bmp') then
      Image1.Picture.LoadFromFile('Logo.bmp')
   else
   begin
      SidebAr1.Top:=0;
      SidebAr1.height:=cxb.top-5;
   end;

end;


procedure TCalcBox.ChangeUnits;
begin
   with units do
   begin
      lenunit1:=lenunit.itemindex;
      pressunit1:=presunit.itemindex;
      flowunit1:=flounit.itemindex;
      diamunit1:=dimunit.itemindex;
   end;
end;


procedure Tcalcbox.Page1Change(Sender: TObject);
begin
   if page1.ActivePageIndex<>2 then formdeactivate(sender);

   ChangeUnits;

   if page1.ActivePageIndex<>2 then Formactivate(sender);

end;

    function getflow(p,k,x : double) : double;
    begin
       //p:=2;
       p:=p/10;  //10;  //meter to bar
       result:=k*mag(p,x)/60/60;                //l/s
    end;



procedure TCalcBox.PlotLoss(no:integer; emitspas,p2,p3:double);
var j : integer;
    lank,losses,la,lo : double;
begin
   p2:=minlos; //7;
   PlotForm.MyChart.datacolor:=Ccolor(no);  //clred+j*100;

   la:=0;
   lo:=0;

   plotform.plot2.cells[no*2,1]:=rtostr(emitspas*100,10,2);

   for j:=1 to 2000 do
      begin
         lank:=j*emitspas;
         losses:=(Emit[j].press-p2)/10;

         if (j>1) and (emit[j].press<emit[j-1].press) then break;
         if emit[j].press>p3 then break;

         if lank>la then la:=lank;
         if losses>lo then lo:=losses;
         if j=1 then
            plotform.mychart.moveto(lank,losses)
         else
            plotform.mychart.drawto(lank,losses);

         plotform.plot2.cells[no*2-1,j+2]:=rtostr(lank,10,5);
         plotform.plot2.cells[no*2,j+2]:=rtostr(losses,10,5);
      end;

    PlotForm.MyChart.datacolor:=ccolor(no);
    //plotform.dChart.bar3D (19,0,21,100,5,45);
    plotform.mychart.Scale1X.RangeHigh := lank;
    plotform.mychart.Scale1Y.RangeHigh := losses;
    plotform.MyChart.ShowGraf;
end;



procedure Tcalcbox.BitBtn3Click(Sender: TObject);


var p1,p2,pf,maxlos,emitval,emitSpas,diam,k,x,EUCv,EUMin,CorFacV,kdfacV : double;
    f,sl,ee,emitNo,j,emitno2 : integer;
    losses : double;
    ss,s4 : string;
    grap,Pc : boolean;

    los1 : array[1..15,1..50] of double;

//
   // emit2 : array[1..2000] of emitrec;

     procedure qsort(a,b: integer);
    var svalue,temp    : double;
        _left,right,j    : integer;
    begin
       _left:=a;
       right:=b;

          svalue:=emit[1].flow;
          if a div 2+b div 2>0 then
             svalue:=emit[a div 2+b div 2].flow;

          repeat
             while emit[_left].flow<svalue do
                inc(_left);   {left:=left+1;}
             while svalue<emit[right].flow do
                dec(right);  {:=right-1;}
             if _left<=right then
             begin
                temp:=emit[_left].flow; emit[_left].flow:=emit[right].flow; emit[right].flow:=temp;
              //  temp:=emit[_left].press; emit[_left].press:=emit[right].press; emit[right].press:=temp;
                inc(_left);  {:=left+1;}
                dec(right); {:=right-1;}
             end;
          until right<=_left;
          if a<right then qsort(a,right);
          if _left<b then qsort(_left,b);
    end;


    function EU : double;
    var fff,x3,y3,avel,min,max : double;
        n1 : integer;
    begin
       min:=1e6;
       max:=-1e6;

       result:=0;

       if formatI=1 then
       begin
          for n1:=1 to emitno do
          begin
             if emit[n1].flow>max then max:=emit[n1].flow;
             if emit[n1].flow<min then min:=emit[n1].flow;
          end;

          avel:=(max+min)/2;

          if avel<>0 then
          begin
             result:=100-(max-min)/avel*100;

          //   x3  :=100-(max-1.7/3600)/avel*100;
           //  y3  :=100-(1.7/3600-min)/avel*100;
          //   if x3<y3 then result:=x3 else result:=y3;

             exit;
          end;
          exit;
       end;

       Qsort(1,emitNo);
       EU:=100;
       avel:=0;
       if emitNo div 4 >0 then
       begin
          fff:=0;

          for n1:=1 to emitNo do Avel:=Avel+emit[n1].flow;
          Avel:=Avel/EmitNo;

          for n1:=1 to emitNo div 4 do
             fff:=fff+emit[n1].flow;
         fff:=fff/(emitNo div 4);

         x3:=1;
         y3:=euCV/100;

         if x3>0 then
            result:=((1-1.27*y3/sqrt(x3))*fff/(aveL)*100);

          if result=0 then result:=100;
       end;
    end;


    function getlength(p1,slope2,espas : double) : double;
    var  stop : boolean;
         slopee,lank,flow,emitspas,p3,eu1 : double;
    begin
       slopee:=slope2;
       stop:=false;
       flow:=getflow(p1,k,x); //emitval;  //flow at 1m
       losses:=p1;
       result:=0;
       emitspas:=espas;
       emitNo:=1;
       emit[emitNo].flow:=flow;   //emitval;
       emit[emitNo].press:=p1;

       lank:=0.5;


       if emitspas>0 then lank:=emitspas;

       repeat
          if emitspas>0 then
          begin
             p1:=hazen(emitspas,flow,diam,pf,0.01);
             p2:=kdFacV*sqr(speed(flow,diam))/(2*9.81);
             p3:=-slopee/100*EmitSpas;   //keep as m /10;    //m to bar
             losses:=losses+p1+p2+p3;
          end
          else
             losses:=hazen(lank,flow,diam,pf,0.01);
          eu1:=eu;
          if losses<=0 then
          begin
             losses:=100;
          end;
          if (losses{-lank*slopee/100}>maxlos) or (EU1<EUMin) then
          begin
            // memo2.lines.add(rtostr(eu1,10,2));
             stop:=true;
           //  memo4.lines.add(rtostr(eu,10,2));
             if emitspas>0 then
                lank:=lank-emitspas
             else
                lank:=lank-0.25;
          end
          else
          begin
             if emitspas>0 then
                lank:=lank+emitspas
             else
                lank:=lank+0.25;
          end;
          if emitspas>0 then
          begin
             emitNo:=EmitNo+1;
             emit[emitNo].flow:=getflow(losses,k,x);
             emit[emitno].press:=losses;
             flow:=flow+emit[emitNo].flow;  //(trunc(lank/emitspas))*emitval;
          end;
       until stop or (lank>200000);
       result:=lank*CorFacV/100;
    end;


    function comma1 : string;
    begin
       result:=' ';
       if commas then result:=';';
    end;


    function GetLength2(slope2,espas : double; reg : integer) : double;
    var l1,l2,p1,p2,base,min1,max1,ave : double;
        j,i : integer;
    begin
       base:=minlos;  //7;   //begin by 5m  0.5 bar
       p1:=base;
       result:=0;
       repeat
          l1:=getlength(p1,slope2,espas);

        (*  if ((slope2=2) or (slope2=3)) and (espas>=0.39) and (espas<=0.41) then
          begin
            memo4.lines.add('Espas '+rtostr(espas,10,2)+'  SLOPE  '+rtostr(slope2,10,2));
            min1:=1e6; max1:=-1e6;
            for j:=1 to emitNo do
            begin
               if emit[j].flow<min1 then min1:=emit[j].flow;
               if emit[j].flow>max1 then max1:=emit[j].flow;
               ave:=(min1+max1)/2;
                                                                                                                                       // emit[j].flow-ave
               memo4.lines.add(rtostr(j*espas,10,2)+'   '+rtostr(emit[j].press,10,2)+'    '+rtostr(emit[j].flow*3600,10,4)+'  '+rtostr((max1-min1)/ave*100,10,2));
            end;
          end;  2011 test *)

         (* if (emitspas=1) and ( (slope2=-3) or (slope2=3)) then
          if p1=base then
          begin
             memo1.lines.add('Slope '+rtostr(slope2,10,2));
             for j:=1 to emitNo do
               memo1.lines.add(inttostr(j)+','+rtostr(emit[j].press,10,2)+','+rtostr(emit[j].flow*100,10,4));
          end; *)
          
          if l1>result then
          begin
             result:=l1;
             p2:=p1;
          end;
          {   for j:=1 to emitno do
                emit2[j]:=emit[j];
             emitno2:=emitno;
          end;}
          //if p1=1 then p1:=0;
          p1:=p1+((maxlos-base)/4.01);  //0.5*10;  //bar
       until p1>maxlos;

       if grap then
       begin
          l1:=25;
          //EuMin:=0;
          p2:=minlos;  //7; //8; //p1; //20; //6;         //0.6 bar start - Manos
          l2:=maxlos;
          //maxlos:=p2+maxlos;
          getlength(p2,slope2,espas);
         // p2:=0.1;
         // getlength(0.1,slope2,espas);

          repeat
             for j:=2 to emitNo do
                if (j*emitspas<=L1) and ((j+1)*EmitSpas>L1) then
                begin
                   i:=trunc(l1/25);
                   los1[reg,I]:=(Emit[j].press-p2)/10;
                   //if i>1 then Los1[reg,I]:=Los1[Reg,I]-los1[reg,i-1];
                end;
             l1:=l1+25;
          until l1>800;
         // los1[reg,i+1]:=(Emit[EmitNo].press-p2)/10;
                //memo1.lines.add(rtostr(emitspas*j,10,2)+'   '+rtostr(emit[j].press,10,2));
          maxlos:=l2;
       end;


    end;


    procedure addm(s:string);
    begin
     //  memo2.lines.add(s);
    end;

    procedure hideV;
    begin
       with plotform do
       begin
          s1.visible:=false;
          s2.visible:=false;
          s3.visible:=false;
          s4.visible:=false;
          s5.visible:=false;
          s6.visible:=false;
          s7.visible:=false;
          s8.visible:=false;
          s9.visible:=false;
          s10.visible:=false;
          s11.visible:=false;
          s12.visible:=false;
          s13.visible:=false;
          s14.visible:=false;
          s15.visible:=false;

          v1.visible:=false;
          v2.visible:=false;
          v3.visible:=false;
          v4.visible:=false;
          v5.visible:=false;
          v6.visible:=false;
          v7.visible:=false;
          v8.visible:=false;
          v9.visible:=false;
          v10.visible:=false;
          v11.visible:=false;
          v12.visible:=false;
          v13.visible:=false;
          v14.visible:=false;
          v15.visible:=false;
       end;
    end;

    procedure AddPlot(pl,ee:integer; ddd:double);
    var s : string;
    begin
       s:=rtostr(emitspas*100,10,0);
       with plotform do
       if pl=1 then
       begin
         case ee of
         1 : begin
                s1.Colors.Default:=ccolor(ee);
                s1.caption:=s;
                s1.Visible:=true;
             end;
         2 : begin
                s2.Colors.Default:=ccolor(ee);
                s2.caption:=s;
                s2.Visible:=true;
             end;
         3 : begin
                s3.Colors.Default:=ccolor(ee);
                s3.caption:=s;
                s3.Visible:=true;
             end;
         4 : begin
                s4.Colors.Default:=ccolor(ee);
                s4.caption:=s;
                s4.Visible:=true;
             end;
         5 : begin
                s5.Colors.Default:=ccolor(ee);
                s5.caption:=s;
                s5.Visible:=true;
             end;
         6 : begin
                s6.Colors.Default:=ccolor(ee);
                s6.caption:=s;
                s6.Visible:=true;
             end;
         7 : begin
                s7.Colors.Default:=ccolor(ee);
                s7.caption:=s;
                s7.Visible:=true;
             end;
         8 : begin
                s8.Colors.Default:=ccolor(ee);
                s8.caption:=s;
                s8.Visible:=true;
             end;
         9 : begin
                s9.Colors.Default:=ccolor(ee);
                s9.caption:=s;
                s9.Visible:=true;
             end;
         10 : begin
                 s10.Colors.Default:=ccolor(ee);
                 s10.caption:=s;
                 s10.Visible:=true;
             end;
         11 : begin
                 s11.Colors.Default:=ccolor(ee);
                 s11.caption:=s;
                 s11.Visible:=true;
             end;
         12 : begin
                 s12.Colors.Default:=ccolor(ee);
                 s12.caption:=s;
                 s12.Visible:=true;
             end;
         13 : begin
                 s13.Colors.Default:=ccolor(ee);
                 s13.caption:=s;
                 s13.Visible:=true;
             end;
         14 : begin
                 s14.Colors.Default:=ccolor(ee);
                 s14.caption:=s;
                 s14.Visible:=true;
             end;
         15 : begin
                 s15.Colors.Default:=ccolor(ee);
                 s15.caption:=s;
                 s15.Visible:=true;
             end;
         end;

         with dChart.TextLabels[ee] do
         begin
            //mode:=tlSimple;
            PosX:=emitspas*100;
            PosY:=ddd+15;
            Caption:=rtostr(ddd,10,0);
            visible:=true;
            TransParent:=true;
            colorborder:=clgreen;
            font.Name:='arial'; //'courier new';
         end;
      end
      else
      begin
         case ee of
         1 : begin
                v1.Colors.Default:=ccolor(ee);
                v1.caption:=s;
                v1.Visible:=true;
             end;
         2 : begin
                v2.Colors.Default:=ccolor(ee);
                v2.caption:=s;
                v2.Visible:=true;
             end;
         3 : begin
                v3.Colors.Default:=ccolor(ee);
                v3.caption:=s;
                v3.Visible:=true;
             end;
         4 : begin
                v4.Colors.Default:=ccolor(ee);
                v4.caption:=s;
                v4.Visible:=true;
             end;
         5 : begin
                v5.Colors.Default:=ccolor(ee);
                v5.caption:=s;
                v5.Visible:=true;
             end;
         6 : begin
                v6.Colors.Default:=ccolor(ee);
                v6.caption:=s;
                v6.Visible:=true;
             end;
         7 : begin
                v7.Colors.Default:=ccolor(ee);
                v7.caption:=s;
                v7.Visible:=true;
             end;
         8 : begin
                v8.Colors.Default:=ccolor(ee);
                v8.caption:=s;
                v8.Visible:=true;
             end;
         9 : begin
                v9.Colors.Default:=ccolor(ee);
                v9.caption:=s;
                v9.Visible:=true;
             end;
         10 : begin
                 v10.Colors.Default:=ccolor(ee);
                 v10.caption:=s;
                 v10.Visible:=true;
             end;
         11 : begin
                 v11.Colors.Default:=ccolor(ee);
                 v11.caption:=s;
                 v11.Visible:=true;
             end;
         12 : begin
                 v12.Colors.Default:=ccolor(ee);
                 v12.caption:=s;
                 v12.Visible:=true;
             end;
         13 : begin
                 v13.Colors.Default:=ccolor(ee);
                 v13.caption:=s;
                 v13.Visible:=true;
             end;
         14 : begin
                 v14.Colors.Default:=ccolor(ee);
                 v14.caption:=s;
                 v14.Visible:=true;
             end;
         15 : begin
                 v15.Colors.Default:=ccolor(ee);
                 v15.caption:=s;
                 v15.Visible:=true;
             end;
         end;
      end;
   end;



    var ShowIt : boolean;
        ddd,maxlim : double;
        e1 : integer;
begin


   plotform.Setup(true);

   hidev;

   grap:=false;


   //val(endpress.text,p2,f);    p2:=units.press_si(p2);
   p2:=0;
   pf:=strtor(pfric.text);

   maxlos:=strtor(maxp.Text)*10;  //-p2;

   minlos:=strtor(minp.Text)*10;
   p1:=minlos; //7;   //p1:=units.press_si(p1);

   maxlim:=maxlos;

   if maxlos<=minlos then
   begin
      ShowMessage('Please enter maximum pressure above '+rtostr(minlos/10,10,2)+' bar');
      exit;
   end;

 


   //val(emitflowD.text,emitval,f);  emitval:=units.flow_si(emitval);


   corfacV:=100+strtor(corfac.Text);
   KdfacV:=strtor(kdfac.Text);

   eucv:=strtor(cv.text);

   k:=strtor(flowk.Text);
   x:=strtor(expo.Text);

   Pc:=x<0.101;

   pc:=format1.ItemIndex=0;

   if PC and (minlos/10>1.49) then
   begin
      ShowMessage('Note. The minimum pressure cannot be above 1.49 bar when the "calculate by pressure limits" is selected');
      exit;
   end;


  // memo2.Clear;
  // addm('before getflow');


   emitval:=getflow(10,k,x);   //start at 1m

   nomflow.Caption:=rtostr(units.si_flow(getflow(10,k,x)),4,1);

   Mflow.Caption:=rtostr(units.si_flow(getflow(maxlos,k,x)),4,1);
   MflowH.Caption:=maxp.Text+' bar';


   diam:=strtor(PipeinputD.text);    diam:=units.diam_si(diam);


    memo4.clear;

  // addm('before clear');
   memo1.clear;

  // addm('after clear');
   //memo4.clear;

   EUMin:=90;

   if formatI=0 then
      memo1.lines.add('                        Length (m) at Eu = 90%')
   else
      memo1.lines.add('                        Length (m) at 10% flow variation');


   if pc then
   begin
      memo1.lines.add('                               Zero Slope');

      if commas then                                  //char(39)
         memo1.lines.add('   Press (bar) > ;1.5  ; 2.0  ; 2.5  ;2.0   ;  3.5   ;  3.0  ; 4.5')
      else
         memo1.lines.add('   Press (bar) >  1.5     2     2.5     3     3.5     4     4.5');
   end
   else
   if commas then
      memo1.lines.add('         Slope > ;  3%  ;   2%  ;  1%  ;  0%  ;  -1%   ; -2%  ; -3%')
   else
      memo1.lines.add('         Slope >    3      2      1      0     -1     -2    -3%');

   memo1.lines.add('Spacing(cm)----------------------------------------------------');

    { with plotform.dChart.TextLabels[1] do
      begin
        // mode:=tlSimple;
         PosX:=300;
         PosY:=200;
         Caption:='Maximum lenghts';
         visible:=true;
         TransParent:=true;
         colorborder:=clgreen;
         font.Name:='arial'; //'courier new';
      end;}


   e1:=0;
   for ee:=1 to 15 do
   begin
     // addm('ee '+inttostr(ee));
      case ee of
      1 : emitspas:=strtor(regspasD1.text);
      2 : emitspas:=strtor(regspasD2.text);
      3 : emitspas:=strtor(regspasD3.text);
      4 : emitspas:=strtor(regspasD4.text);
      5 : emitspas:=strtor(regspasD5.text);
      6 : emitspas:=strtor(regspasD6.text);
      7 : emitspas:=strtor(regspasD7.text);
      8 : emitspas:=strtor(regspasD8.text);
      9 : emitspas:=strtor(regspasD9.text);
      10: emitspas:=strtor(regspasD10.text);
      11: emitspas:=strtor(regspasD11.text);
      12: emitspas:=strtor(regspasD12.text);
      13: emitspas:=strtor(regspasD13.text);
      14: emitspas:=strtor(regspasD14.text);
      15: emitspas:=strtor(regspasD15.text);
      end;
      emitspas:=emitspas/100;   //cm to mmunits.len_si(emitspas0);

      ss:='';
      if emitspas>0 then
      begin
         if PC then
         begin
            MaxLos:=15;

            repeat
               ddd:=units.si_len(getLength2(0,emitspas,ee));
               ss:=ss+r_s(ddd,6,0)+comma1;
               MaxLos:=MaxLos+5;

               if maxlos=35 then
               begin
                  plotform.dchart.Scale1X.RangeHigh := emitspas*100+10;
                  plotform.dchart.Scale1Y.RangeHigh := ddd+30;
                  PlotForm.dChart.fillcolor:=ccolor(ee);
                  plotform.dChart.bar3D (emitspas*100-2.5,0,emitspas*100+2.5,ddd,5,45);

                  with plotform.plot1 do
                  begin
                     cells[1,ee]:=rtostr(emitspas*100,10,2);
                     cells[2,ee]:=rtostr(ddd,10,2);
                  end;

                  Addplot(1,ee,ddd);

                  //plotform.dChart.TextFontStyle:='sanserif';
                  //plotform.dChart.Text (emitspas*100,ddd+15, 1, rtostr(ddd,10,0));
               end;


            until Maxlos>45;
         end
         else
            for sl:=-3 to 3 do
            begin
               ddd:=units.si_len(getLength2(sl,emitspas,ee));
               ss:=ss+r_s(ddd,6,0)+comma1;

               if sl=0 then
               begin
                  plotform.dchart.Scale1X.RangeHigh := emitspas*100+10;
                  plotform.dchart.Scale1Y.RangeHigh := ddd+30;
                  PlotForm.dChart.fillcolor:=ccolor(ee);
                  plotform.dChart.bar3D (emitspas*100-2.5,0,emitspas*100+2.5,ddd,5,45);

                  with plotform.plot1 do
                  begin
                     cells[1,ee]:=rtostr(emitspas*100,10,2);
                     cells[2,ee]:=rtostr(ddd,10,2);
                  end;

                  Addplot(1,ee,ddd);

                  with plotform.dChart.TextLabels[ee] do
                  begin
                     PosX:=emitspas*100;
                     PosY:=ddd+15;
                     Caption:=rtostr(ddd,10,0);
                     visible:=true;
                     TransParent:=true;
                     colorborder:=clgreen;
                  end;
               end;
            end;


         memo1.lines.add('   '+s_s(rtostr(units.si_len(emitspas*100),5,0),5)+comma1+'      '+ss);
      end;
   end;

   //-----------------


   if not pc then
   begin

      EUMin:=90;

   //   memo1.lines.add('');
      memo1.lines.add('===============================================================');
      memo1.lines.add('');

      memo1.lines.add('                        Length (m) at 0% slope');

      case formatI of
      0 :   if commas then
            memo1.lines.add('         EU >  ;  95.0% ; 92.5% ; 90.0%  ; 85.0%  ; 80.0%')
            else
            memo1.lines.add('         EU >     95%   92,5%   90%    85%    80%');
      1 :   if commas then
            memo1.lines.add('Flow variation >;  5.0% ;  7.5% ; 10.0%  ; 15.0%  ; 20.0%')
            else
            memo1.lines.add('Flow variation >   5%    7,5%   10%    15%    20%');
      end;



      memo1.lines.add('Spacing(cm)----------------------------------------------------');
   end;


      fillchar(los1,sizeof(los1),0);

      for ee:=1 to 15 do
      begin
         case ee of
         1 : emitspas:=strtor(regspasD1.text);
         2 : emitspas:=strtor(regspasD2.text);
         3 : emitspas:=strtor(regspasD3.text);
         4 : emitspas:=strtor(regspasD4.text);
         5 : emitspas:=strtor(regspasD5.text);
         6 : emitspas:=strtor(regspasD6.text);
         7 : emitspas:=strtor(regspasD7.text);
         8 : emitspas:=strtor(regspasD8.text);
         9 : emitspas:=strtor(regspasD9.text);
         10: emitspas:=strtor(regspasD10.text);
         11: emitspas:=strtor(regspasD11.text);
         12: emitspas:=strtor(regspasD12.text);
         13: emitspas:=strtor(regspasD13.text);
         14: emitspas:=strtor(regspasD14.text);
         15: emitspas:=strtor(regspasD15.text);

         end;

         emitspas:=emitspas/100;   //cm to mmunits.len_si(emitspas0);

         ss:='';
         if emitspas>0 then
         begin
            for sl:=1 to 5 do
            begin
               case sl of
               1 : EUmin:=95;
               2 : EUmin:=92.5;
               3 : begin EUmin:=90; {grap:=true;} end;
               4 : EUmin:=85;
               5 : begin EUmin:=80; {grap:=true;} end;
               6 : EUmin:=10;

               end;

               if sl=3 then
               begin
                  grap:=true;
                  getLength2(0,emitspas,ee);  //to get losses
                  grap:=false;

                  Addplot(2,ee,ddd);

               end;

               ss:=ss+r_s(units.si_len(getLength2(0,emitspas,ee)),6,0)+comma1;

            end;


            if not pc then memo1.lines.add('   '+s_s(rtostr(units.si_len(emitspas*100),5,0),5)+comma1+'      '+ss);
         end;
      end;

   ss:='Spacing (cm) ';
   for ee:=1 to 15 do
   begin
      case ee of
      1 : s4:=regspasD1.text;
      2 : s4:=regspasD2.text;
      3 : s4:=regspasD3.text;
      4 : s4:=regspasD4.text;
      5 : s4:=regspasD5.text;
      6 : s4:=regspasD6.text;
      7 : s4:=regspasD7.text;
      8 : s4:=regspasD8.text;
      9 : s4:=regspasD9.text;
      10: s4:=regspasD10.text;
      11: s4:=regspasD11.text;
      12: s4:=regspasD12.text;
      13: s4:=regspasD13.text;
      14: s4:=regspasD14.text;
      15: s4:=regspasD15.text;
      end;

      ss:=ss+comma1+' '+s_s(s4,6);
   end;
   memo4.lines.add(ss);
   memo4.lines.add('Length (m)');




   for sl:=1 to 50 do
   begin
      ss:=s_s(rtostr(sl*25,10,0),5)+'       ';
      showit:=false;
      for ee:=1 to 15 do
      begin
         case ee of
         1 : emitspas:=strtor(regspasD1.text);
         2 : emitspas:=strtor(regspasD2.text);
         3 : emitspas:=strtor(regspasD3.text);
         4 : emitspas:=strtor(regspasD4.text);
         5 : emitspas:=strtor(regspasD5.text);
         6 : emitspas:=strtor(regspasD6.text);
         7 : emitspas:=strtor(regspasD7.text);
         8 : emitspas:=strtor(regspasD8.text);
         9 : emitspas:=strtor(regspasD9.text);
         10: emitspas:=strtor(regspasD10.text);
         11: emitspas:=strtor(regspasD11.text);
         12: emitspas:=strtor(regspasD12.text);
         13: emitspas:=strtor(regspasD13.text);
         14: emitspas:=strtor(regspasD14.text);
         15: emitspas:=strtor(regspasD15.text);
         end;

         emitspas:=emitspas/100;   //cm to mmunits.len_si(emitspas0);



         if emitspas>0 then
         begin
            //if sl=1 then PlotLoss(emitspas,p2);
            if los1[ee,sl]<>0 then
            begin
               showIt:=true;
               ss:=ss+comma1+' '+s_s(rtostr(los1[ee,sl],10,4),6);
            end
            else
               ss:=ss+comma1+' '+s_s(' ',6);
         end;
      end;
      if ShowIt then
         memo4.lines.add(ss);
   end;

   //plott loss

      for ee:=1 to 15 do
      begin
         case ee of
         1 : emitspas:=strtor(regspasD1.text);
         2 : emitspas:=strtor(regspasD2.text);
         3 : emitspas:=strtor(regspasD3.text);
         4 : emitspas:=strtor(regspasD4.text);
         5 : emitspas:=strtor(regspasD5.text);
         6 : emitspas:=strtor(regspasD6.text);
         7 : emitspas:=strtor(regspasD7.text);
         8 : emitspas:=strtor(regspasD8.text);
         9 : emitspas:=strtor(regspasD9.text);
         10: emitspas:=strtor(regspasD10.text);
         11: emitspas:=strtor(regspasD11.text);
         12: emitspas:=strtor(regspasD12.text);
         13: emitspas:=strtor(regspasD13.text);
         14: emitspas:=strtor(regspasD14.text);
         15: emitspas:=strtor(regspasD15.text);
         end;

         p2:=minlos;  //7;

         emitspas:=emitspas/100;   //cm to mmunits.len_si(emitspas0);




         getlength(p2,0,emitspas);

         if emitspas>0 then
         begin
            addplot(2,ee,ddd);
            PlotLoss(ee,emitspas,p2,maxLim);
         end;   
      end;


   commas:=false;

   if ppl.Checked then plotform.show;


end;



procedure Tcalcbox.cxBClick(Sender: TObject);
var sExe : string;
    i : integer;
begin

   sExe:=GetExeByExtension('.Html');

  // if (sEXE <> '') then
  //       i:=ShellExecute(0,'OPEN', PChar(sEXE), PChar(Scopy), nil, SW_SHOWNORMAL) ;

   ShellExecute( 2,'open','www.irrimaker.com', nil,nil, SW_SHOWNORMAL);
end;

function printit(ww:string; Var x,y:integer) : boolean;   {true=newpage}
var ff,pp,SZ : integer;
begin
   with printer do
   begin
      ff:=canvas.font.size;
      //startit;
      pp:=getdevicecaps(handle,logpixelsx);
      canvas.font.size:=ff; {trunc(ff*pp/120*1.5);}  {2} {dotmatrix=120}
      canvas.textout(x,y,ww);
      sz:=canvas.textheight('A');
      inc(y,sz);
      canvas.font.size:=ff;
      result:=y+sz>pageheight;
   end;
end;


procedure delay(wat : integer);
var t1,t2,t3 : double;
begin
   t3:=wat/1000/3600/24;
   t1:=time;
   repeat
      t2:=time;
   until (t2-t1>t3);
end;

procedure Tcalcbox.xbutClick(Sender: TObject);
var x,y,j : integer;
   s,ss : string;
   ok : boolean;

   function outComma(s:string):string;
   var j : integer;
   begin
      result:='';

      if pos('Length',s)>0 then
      begin
         result:=s;
         exit;
      end;

      for j:=1 to length(s) do
         if (s[j]<>' ') and (s[j]<>';') then result:=result+s[j];

      if comma.checked then
      for j:=1 to length(result) do
         if result[j]='.' then result[j]:=',';


   end;

   procedure PrintHead(xcel:boolean);
   begin
      if not ImAlso.Checked then exit;


      if Xcel then
      begin
        inc(y);
        spr1.cells[0,y]:='Emitter Information'; inc(y);
        inc(y);
        with Spr1 do
        begin
           Spr1.CellProperties[3,y].Alignment:=taLeftJustify;
           cells[0,y]:=label20.Caption;
              //spr1.alAlignments[3,y]:=taLeftJustify;
              cells[3,y]:=cv.text;

           cells[4,y]:='    '+copy(label23.caption,1,39);
            cells[8,y]:=flowk.text; cells[9,y]:='bar'; inc(y);
           cells[0,y]:=label29.Caption;         cells[3,y]:=kdfac.text;
           cells[5,y]:=label26.caption;               cells[8,y]:=expo.text; inc(y);
           cells[0,y]:=label24.Caption;         cells[3,y]:=maxp.text;
           cells[5,y]:=label28.caption;               cells[8,y]:=corfac.text;  inc(y);

           cells[0,y]:=copy(label36.Caption,1,14); cells[3,y]:=minp.text;  cells[4,y]:='bar'; inc(y);

           cells[0,y]:=label27.Caption; cells[3,y]:=pipeinputd.text;
           cells[4,y]:=drippipeU.caption;
           cells[5,y]:=label31.caption; cells[8,y]:=pfric.text;   inc(y);
           Inc(y);
        end;
      end
      else
      begin
         printit('',x,y);

         printit('Emitter Information',x,y);
         printit('-------------------',x,y);

         printit(s_s(s_s(label20.Caption,35)+cv.text,40)+'   '+copy(label23.caption,1,23)+'K   '+flowk.text,x,y);
         printit(s_s(s_s(label29.Caption,35)+kdfac.text,40)+'   '+copy(label26.caption,1,25)+'  '+expo.text,x,y);
         printit(s_s(s_s(label24.Caption,35)+maxp.text,40)+'   '+copy(label28.caption,1,25)+'  '+corfac.text,x,y);
         printit(s_s(s_s(label27.Caption,35)+pipeinputd.text,40)+'   '+copy(label31.caption+'    ',1,25)+'  '+pfric.text,x,y);

         printit('',x,y);
      end;   

   end;



begin
   case (sender as tcomponent).tag of
   1 : with printer do
       begin
          begindoc;
          printer.canvas.Font:=memo1.font;
          X:=10; Y:=10;

          for j:=0 to memo2.lines.count-1 do printit(memo2.lines[j],x,y);

          PrintHead(false);

          for j:=0 to memo1.lines.count-1 do printit(memo1.lines[j],x,y);
          for j:=0 to memo3.lines.count-1 do printit(memo3.lines[j],x,y);
         // for j:=0 to memo4.lines.count-1 do printit(memo3.lines[j],x,y);
          enddoc;
       end;
   2 : begin
          Y:=1;

          for j:=0 to spr1.rowcount-1 do
             for x:=0 to spr1.ColCount-1 do
               spr1.cells[x,j]:='';

          Commas:=true;

          calc.Visible:=false;
          pagec1.ActivePageIndex:=0;

          BitBtn3Click(Sender);

          calc.Visible:=true;
          pagec1.ActivePageIndex:=1;

          ok:=false;
          for j:=0 to memo2.lines.count-1 do
             if memo2.lines[j]<>'' then ok:=true;
          if ok then
             for j:=0 to memo2.lines.count-1 do
             begin
                spr1.cells[0,y]:=memo2.lines[j];
                inc(y);
             end;

          PrintHead(true);

          for j:=0 to memo1.lines.count-1 do
          begin
             s:=memo1.lines[j];
             x:=0;
             while length(s)>0 do
             begin
                ss:=copy(s,1,pos(';',s));
                if ss='' then
                begin
                   ss:=s;
                   s:='';
                end;
                spr1.cells[x,y]:=outcomma(ss);
                //Spr1.CellProperties[x,y].Alignment:=taLeftJustify;
                //spr1.Alignments[x,y]:=taLeftJustify;
                inc(x);
                s:=copy(s,pos(';',s)+1,length(s));
             end;
             inc(y);
          end;

          inc(y);

          for j:=0 to memo4.lines.count-1 do
          begin
             s:=memo4.lines[j];
             x:=0;
             while length(s)>0 do
             begin
                ss:=copy(s,1,pos(';',s));
                if ss='' then
                begin
                   ss:=s;
                   s:='';
                end;
                spr1.cells[x,y]:=outcomma(ss);
                inc(x);
                s:=copy(s,pos(';',s)+1,length(s));
             end;
             inc(y);
          end;

          for j:=0 to memo3.lines.count-1 do
          begin
             spr1.cells[0,y]:=memo3.lines[j];
             inc(y);
          end;


          Spr1.CopyToClipBoard;

          j:=30;
          while j<400 do
          begin
             xbut.Left:=j;
             delay(20);
             application.ProcessMessages;
             inc(j,3);
          end;

          while j>30 do
          begin
             xbut.Left:=j;
             delay(10);
             application.ProcessMessages;
             dec(j,6);
          end;

          xbut.Left:=30;

       end;
   end;
end;

procedure Tcalcbox.psetupClick(Sender: TObject);
begin
   PrinterSetupDialog1.execute;
end;

procedure Tcalcbox.SideBar1ItemClick(Sender: TObject;
  Item: TdxSideBarItem);
begin
   formatI:=Item.tag;
   BitBtn3Click(sender);
end;

procedure Tcalcbox.BitBtn4Click(Sender: TObject);
var losses,flow,emitspas,diam,lank,p1,p2,p3,pf : double;
    kdFacV,Eflow,k,x : double;
    j : integer;
    mov : boolean;
begin
    Plotform.show;


//    plotform.Setup(true);

    for j:=1 to 15 do
    begin
       case j of
       1 : emitspas:=strtor(regspasD1.text);
       2 : emitspas:=strtor(regspasD2.text);
       3 : emitspas:=strtor(regspasD3.text);
       4 : emitspas:=strtor(regspasD4.text);
       5 : emitspas:=strtor(regspasD5.text);
       6 : emitspas:=strtor(regspasD6.text);
       7 : emitspas:=strtor(regspasD7.text);
       8 : emitspas:=strtor(regspasD8.text);
       9 : emitspas:=strtor(regspasD9.text);
       10: emitspas:=strtor(regspasD10.text);
       11: emitspas:=strtor(regspasD11.text);
       12: emitspas:=strtor(regspasD12.text);
       13: emitspas:=strtor(regspasD13.text);
       14: emitspas:=strtor(regspasD14.text);
       15: emitspas:=strtor(regspasD15.text);
       end;
       emitspas:=emitspas/100;   //cm to mmunits.len_si(emitspas0);

       with grap do
       begin
          losses:=0;
          flow:=0;

          kanv.pen.color:=clred+j*100;



          pf:=140;
          lank:=0;

          diam:=strtor(PipeinputD.text);
          KdfacV:=strtor(kdfac.Text);
          k:=strtor(flowk.Text);
          x:=strtor(expo.Text);

          mov:=false;

          repeat
             p1:=hazen(emitspas,flow,diam,pf,0.01);
             p2:=kdFacV*sqr(speed(flow,diam))/(2*9.81);
             p3:=0; //-slopee/100*EmitSpas/10;    //m to bar
             losses:=losses+p1+p2+p3;

             if lank>=25 then
             if not mov then
             begin
                mov:=true;
                Movem(lank,losses/10);
              //  plotform.mychart.moveto(lank,losses/10);
             end
             else
             begin
                drawm(lank,losses/10);
              //  plotform.mychart.drawto(lank,losses/10);
             end;

             lank:=lank+emitspas;
             Eflow:=getflow(losses+10,k,x);
             flow:=flow+eflow;  //(trunc(lank/emitspas))*emitval;
          until lank>250;
       end;
    end;

    //---------------------

end;

procedure Tcalcbox.Edit1Change(Sender: TObject);
var s : string;
begin
  // s:=edit1.text;
  // memo4.Lines.add(inttostr(ord(s[1])));
end;

procedure Tcalcbox.FormDestroy(Sender: TObject);
begin
   FormDeactivate(Sender);
end;

end.


lank:=0.5;
          stop:=false;
          flow:=emitval;
          losses:=0;
          repeat
             if emitspas>0 then
             begin
                p1:=hazen(0.5,flow,diam,pf,0.01);
                losses:=losses+p1;
             end
             else
                losses:=hazen(lank,flow,diam,pf,0.01);
             if losses-lank*slopee/100>maxlos then
             begin
                stop:=true;
                lank:=lank-0.25;
             end
             else
                lank:=lank+0.25;
             if emitspas>0 then
                flow:=(trunc(lank/emitspas)+1)*emitval;
          until stop or (lank>20000);
          lenresult.caption:=rtostr(units.si_len(lank),10,2)+' '+units.leng;


